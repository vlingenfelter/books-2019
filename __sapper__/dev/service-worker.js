(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1575439108125;

	const files = [
		"service-worker-index.html",
		".DS_Store",
		"allbooks.png",
		"books/.DS_Store",
		"books/alittlelife.jpg",
		"books/apictureofdoriangray.jpg",
		"books/appalachianelegy.jpg",
		"books/badfeminist.jpg",
		"books/bagombosnuffbox.jpg",
		"books/becoming.jpg",
		"books/betweentheworldandme.jpg",
		"books/bloodmeridian.jpg",
		"books/callmebyyourname.jpg",
		"books/cherry.jpg",
		"books/cinderellaatemydaughter.jpg",
		"books/colorlesstsukurutazaki.jpg",
		"books/comeasyouare.jpg",
		"books/comedysexgod.jpg",
		"books/dearijeawele.jpg",
		"books/dopesick.jpg",
		"books/downgirlthelogicofmisogyny.jpg",
		"books/fahrenheit451.jpg",
		"books/galapagos.jpg",
		"books/howtokillacity.jpg",
		"books/immigrantmontana.jpg",
		"books/labgirl.jpg",
		"books/menwithoutwomen.jpg",
		"books/nomadland.jpg",
		"books/nomudnolotus.jpg",
		"books/pathofcompassion.jpg",
		"books/poorlittlerichslum.jpg",
		"books/slime.jpg",
		"books/supermarket.jpg",
		"books/thebelljar.jpg",
		"books/thecoloroflaw.jpg",
		"books/thefemalepersuasion.jpg",
		"books/thegirlwhosleptwithgod.jpg",
		"books/thehandmaidstale.jpg",
		"books/thekillerinsideme.jpg",
		"books/thenightocean.jpg",
		"books/therethere.jpg",
		"books/thesixthextinction.jpg",
		"books/thesympathizer.jpg",
		"books/thevictim.jpg",
		"books/thischangeseverything.jpg",
		"books/thisishowyouloseher.jpg",
		"books/toofattooloudtooslutty.jpg",
		"books/toshakethesleepingself.jpg",
		"books/walkablecity.jpg",
		"books/weshouldallbefeminists.jpg",
		"books/wewerefeministsonce.jpg",
		"books/whatweknowaboutclimatechange.jpg",
		"books/whenbreathbecomesair.jpg",
		"books/whyiamnotafeminist.jpg",
		"books/wonder.jpg",
		"books/wutheringheights.jpg",
		"books.csv",
		"favicon.png",
		"global.css",
		"manifest.json"
	];

	const shell = [
		"client/index.2e7b8135.js",
		"client/client.a06f4e90.js",
		"client/index.84d034b5.js",
		"client/books.0176c55b.js",
		"client/sapper-dev-client.89e34bae.js"
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const cached = new Set(to_cache);

	self.addEventListener('install', event => {
		event.waitUntil(
			caches
				.open(ASSETS)
				.then(cache => cache.addAll(to_cache))
				.then(() => {
					self.skipWaiting();
				})
		);
	});

	self.addEventListener('activate', event => {
		event.waitUntil(
			caches.keys().then(async keys => {
				// delete old caches
				for (const key of keys) {
					if (key !== ASSETS) await caches.delete(key);
				}

				self.clients.claim();
			})
		);
	});

	self.addEventListener('fetch', event => {
		if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

		const url = new URL(event.request.url);

		// don't try to handle e.g. data: URIs
		if (!url.protocol.startsWith('http')) return;

		// ignore dev server requests
		if (url.hostname === self.location.hostname && url.port !== self.location.port) return;

		// always serve static files and bundler-generated assets from cache
		if (url.host === self.location.host && cached.has(url.pathname)) {
			event.respondWith(caches.match(event.request));
			return;
		}

		// for pages, you might want to serve a shell `service-worker-index.html` file,
		// which Sapper has generated for you. It's not right for every
		// app, but if it's right for yours then uncomment this section
		/*
		if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
			event.respondWith(caches.match('/service-worker-index.html'));
			return;
		}
		*/

		if (event.request.cache === 'only-if-cached') return;

		// for everything else, try the network first, falling back to
		// cache if the user is offline. (If the pages never change, you
		// might prefer a cache-first approach to a network-first one.)
		event.respondWith(
			caches
				.open(`offline${timestamp}`)
				.then(async cache => {
					try {
						const response = await fetch(event.request);
						cache.put(event.request, response.clone());
						return response;
					} catch(err) {
						const response = await cache.match(event.request);
						if (response) return response;

						throw err;
					}
				})
		);
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
