import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, e as element, a as space, t as text, c as claim_element, b as children, g as detach_dev, h as claim_space, f as claim_text, j as attr_dev, l as add_location, m as insert_dev, o as append_dev, B as set_data_dev, n as noop, J as onMount, C as empty, x as transition_in, H as group_outros, y as transition_out, I as check_outros, L as destroy_each, q as create_component, r as claim_component, u as mount_component, z as destroy_component, M as add_render_callback, N as add_resize_listener } from './index.47dbced2.js';
import { c as csv } from './index.0a3dd308.js';

/* src/components/Card.svelte generated by Svelte v3.16.0 */

const file = "src/components/Card.svelte";

function create_fragment(ctx) {
	let div3;
	let div2;
	let div0;
	let img;
	let img_src_value;
	let img_alt_value;
	let t0;
	let div1;
	let h1;
	let t1_value = /*props*/ ctx[0].title + "";
	let t1;
	let t2;
	let p;
	let t3_value = /*props*/ ctx[0].author + "";
	let t3;

	const block = {
		c: function create() {
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			img = element("img");
			t0 = space();
			div1 = element("div");
			h1 = element("h1");
			t1 = text(t1_value);
			t2 = space();
			p = element("p");
			t3 = text(t3_value);
			this.h();
		},
		l: function claim(nodes) {
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			img = claim_element(div0_nodes, "IMG", { src: true, alt: true, class: true });
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h1 = claim_element(div1_nodes, "H1", {});
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, t1_value);
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(div1_nodes);
			p = claim_element(div1_nodes, "P", {});
			var p_nodes = children(p);
			t3 = claim_text(p_nodes, t3_value);
			p_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*props*/ ctx[0].img)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = /*props*/ ctx[0].title);
			attr_dev(img, "class", "svelte-1x9986k");
			add_location(img, file, 56, 6, 919);
			attr_dev(div0, "class", "flip-card-front svelte-1x9986k");
			add_location(div0, file, 55, 4, 883);
			add_location(h1, file, 59, 6, 1010);
			add_location(p, file, 60, 6, 1039);
			attr_dev(div1, "class", "flip-card-back svelte-1x9986k");
			add_location(div1, file, 58, 4, 975);
			attr_dev(div2, "class", "flip-card-inner svelte-1x9986k");
			add_location(div2, file, 54, 2, 849);
			attr_dev(div3, "class", "flip-card svelte-1x9986k");
			add_location(div3, file, 53, 0, 823);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div3, anchor);
			append_dev(div3, div2);
			append_dev(div2, div0);
			append_dev(div0, img);
			append_dev(div2, t0);
			append_dev(div2, div1);
			append_dev(div1, h1);
			append_dev(h1, t1);
			append_dev(div1, t2);
			append_dev(div1, p);
			append_dev(p, t3);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*props*/ 1 && img.src !== (img_src_value = /*props*/ ctx[0].img)) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*props*/ 1 && img_alt_value !== (img_alt_value = /*props*/ ctx[0].title)) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (dirty & /*props*/ 1 && t1_value !== (t1_value = /*props*/ ctx[0].title + "")) set_data_dev(t1, t1_value);
			if (dirty & /*props*/ 1 && t3_value !== (t3_value = /*props*/ ctx[0].author + "")) set_data_dev(t3, t3_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { props = {
		img: "books/alittlelife.jpg",
		title: "A Little Life",
		author: "Hanya Yanagihara",
		age: "4",
		year: "2016"
	} } = $$props;

	const writable_props = ["props"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Card> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("props" in $$props) $$invalidate(0, props = $$props.props);
	};

	$$self.$capture_state = () => {
		return { props };
	};

	$$self.$inject_state = $$props => {
		if ("props" in $$props) $$invalidate(0, props = $$props.props);
	};

	return [props];
}

class Card extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { props: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Card",
			options,
			id: create_fragment.name
		});
	}

	get props() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set props(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/BookList.svelte generated by Svelte v3.16.0 */
const file$1 = "src/components/BookList.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (50:1) {#if loaded}
function create_if_block(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*data*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*data*/ 2) {
				each_value = /*data*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(50:1) {#if loaded}",
		ctx
	});

	return block;
}

// (51:2) {#each data as prop}
function create_each_block(ctx) {
	let div;
	let t;
	let current;

	const card = new Card({
			props: { props: /*prop*/ ctx[4] },
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(card.$$.fragment);
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(card.$$.fragment, div_nodes);
			t = claim_space(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "card-container svelte-tzjrkc");
			add_location(div, file$1, 51, 2, 765);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(card, div, null);
			append_dev(div, t);
			current = true;
		},
		p: function update(ctx, dirty) {
			const card_changes = {};
			if (dirty & /*data*/ 2) card_changes.props = /*prop*/ ctx[4];
			card.$set(card_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(card);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(51:2) {#each data as prop}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div;
	let div_resize_listener;
	let current;
	let if_block = /*loaded*/ ctx[2] && create_if_block(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (if_block) if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "wrapper svelte-tzjrkc");
			add_render_callback(() => /*div_elementresize_handler*/ ctx[3].call(div));
			add_location(div, file$1, 48, 0, 683);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if (if_block) if_block.m(div, null);
			div_resize_listener = add_resize_listener(div, /*div_elementresize_handler*/ ctx[3].bind(div));
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*loaded*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (if_block) if_block.d();
			div_resize_listener.cancel();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let w;
	let data = [];
	let loaded = false;

	onMount(() => {
		csv("books.csv").then(d => {
			console.log(d);

			$$invalidate(1, data = d.sort((a, b) => {
				return parseInt(a["Color Order"]) - parseInt(b["Color Order"]);
			}).map(v => {
				return {
					img: `books/${v["Image"]}`,
					title: v["Title"],
					author: v["Author"],
					background: "#1fa898"
				};
			}));

			console.log(data);
		});

		console.log(w);
		$$invalidate(2, loaded = true);
	});

	function div_elementresize_handler() {
		w = this.clientWidth;
		$$invalidate(0, w);
	}

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ("w" in $$props) $$invalidate(0, w = $$props.w);
		if ("data" in $$props) $$invalidate(1, data = $$props.data);
		if ("loaded" in $$props) $$invalidate(2, loaded = $$props.loaded);
	};

	return [w, data, loaded, div_elementresize_handler];
}

class BookList extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "BookList",
			options,
			id: create_fragment$1.name
		});
	}
}

/* src/routes/books.svelte generated by Svelte v3.16.0 */

function create_fragment$2(ctx) {
	let t;
	let current;
	const booklist = new BookList({ $$inline: true });

	const block = {
		c: function create() {
			t = space();
			create_component(booklist.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			t = claim_space(nodes);
			claim_component(booklist.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			document.title = "About";
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			mount_component(booklist, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(booklist.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(booklist.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			destroy_component(booklist, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

class Books extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Books",
			options,
			id: create_fragment$2.name
		});
	}
}

export default Books;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9va3MuYTYyOTdhMTYuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NhcmQuc3ZlbHRlIiwiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvQm9va0xpc3Quc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIGV4cG9ydCBsZXQgcHJvcHMgPSB7XG4gICAgaW1nOiAnYm9va3MvYWxpdHRsZWxpZmUuanBnJyxcbiAgICB0aXRsZTogJ0EgTGl0dGxlIExpZmUnLFxuICAgIGF1dGhvcjogJ0hhbnlhIFlhbmFnaWhhcmEnLFxuICAgIGFnZTogJzQnLFxuICAgIHllYXI6ICcyMDE2JyxcbiAgfVxuXG48L3NjcmlwdD5cblxuPHN0eWxlPlxuICAuZmxpcC1jYXJkIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICB3aWR0aDogMjUwcHg7XG4gICAgaGVpZ2h0OiAzNTBweDtcbiAgfVxuXG4gIC5mbGlwLWNhcmQtaW5uZXIge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjhzO1xuICAgIHRyYW5zZm9ybS1zdHlsZTogcHJlc2VydmUtM2Q7XG4gIH1cblxuICAuZmxpcC1jYXJkOmhvdmVyIC5mbGlwLWNhcmQtaW5uZXIge1xuICAgIHRyYW5zZm9ybTogcm90YXRlWSgxODBkZWcpO1xuICB9XG5cbiAgLmZsaXAtY2FyZC1mcm9udCwgLmZsaXAtY2FyZC1iYWNrIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIGJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjtcbiAgfVxuXG4gIC5mbGlwLWNhcmQtZnJvbnQge1xuICAgIGNvbG9yOiBibGFjaztcbiAgfVxuXG4gIC5mbGlwLWNhcmQtYmFjayB7XG4gICAgY29sb3I6IHdoaXRlO1xuICAgIHRyYW5zZm9ybTogcm90YXRlWSgxODBkZWcpO1xuICB9XG5cbiAgaW1nIHtcbiAgICBtYXgtaGVpZ2h0OiAxMDAlO1xuICB9XG48L3N0eWxlPlxuXG5cbjxkaXYgY2xhc3M9XCJmbGlwLWNhcmRcIj5cbiAgPGRpdiBjbGFzcz1cImZsaXAtY2FyZC1pbm5lclwiPlxuICAgIDxkaXYgY2xhc3M9XCJmbGlwLWNhcmQtZnJvbnRcIj5cbiAgICAgIDxpbWcgc3JjPXtwcm9wcy5pbWd9IGFsdD17cHJvcHMudGl0bGV9ID5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiZmxpcC1jYXJkLWJhY2tcIj5cbiAgICAgIDxoMT57cHJvcHMudGl0bGV9PC9oMT5cbiAgICAgIDxwPntwcm9wcy5hdXRob3J9PC9wPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PiIsIjxzY3JpcHQ+XG5cdGltcG9ydCBDYXJkIGZyb20gJy4vQ2FyZC5zdmVsdGUnO1xuXHRpbXBvcnQgKiBhcyBmZXRjaCBmcm9tICdkMy1mZXRjaCc7XG5cdGltcG9ydCB7IG9uTW91bnQgfSBmcm9tICdzdmVsdGUnO1xuXG5cdGxldCB3O1xuXHRsZXQgZGF0YSA9IFtdO1xuXHRsZXQgbG9hZGVkID0gZmFsc2U7XG5cblx0b25Nb3VudCgoKSA9PiB7XG5cdFx0ZmV0Y2guY3N2KCdib29rcy5jc3YnKS50aGVuKChkKSA9PiB7XG5cdFx0XHRjb25zb2xlLmxvZyhkKTtcblxuXG5cblx0XHRcdGRhdGEgPSBkLnNvcnQoKGEsYikgPT4ge1xuXHRcdFx0XHRyZXR1cm4gcGFyc2VJbnQoYVsnQ29sb3IgT3JkZXInXSkgLSBwYXJzZUludChiWydDb2xvciBPcmRlciddKTtcblx0XHRcdH0pLm1hcCh2ID0+IHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRpbWc6IGBib29rcy8ke3ZbJ0ltYWdlJ119YCxcblx0XHRcdFx0XHR0aXRsZTogdlsnVGl0bGUnXSxcblx0XHRcdFx0XHRhdXRob3I6IHZbJ0F1dGhvciddLFxuXHRcdFx0XHRcdGJhY2tncm91bmQ6ICcjMWZhODk4Jyxcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdGNvbnNvbGUubG9nKGRhdGEpO1xuXHRcdH0pXG5cblx0XHRjb25zb2xlLmxvZyh3KTtcblxuXHRcdGxvYWRlZCA9IHRydWU7XG5cdH0pXG5cblxuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cblx0LmNhcmQtY29udGFpbmVyIHtcblx0XHRwYWRkaW5nOiAxZW07XG5cdH1cblxuXHQud3JhcHBlciB7XG5cdFx0IGRpc3BsYXk6IGZsZXg7XG4gIFx0XHRmbGV4LXdyYXA6IHdyYXA7XG5cdH1cbjwvc3R5bGU+XG5cbjxkaXYgY2xhc3M9J3dyYXBwZXInIGJpbmQ6Y2xpZW50V2lkdGg9e3d9PlxuXHR7I2lmIGxvYWRlZH1cblx0XHR7I2VhY2ggZGF0YSBhcyBwcm9wfVxuXHRcdDxkaXYgY2xhc3M9J2NhcmQtY29udGFpbmVyJz5cblx0XHRcdDxDYXJkIHByb3BzPXtwcm9wfS8+XG5cdFx0PC9kaXY+XG5cdFx0ey9lYWNofVxuXHR7L2lmfSBcbjwvZGl2PiJdLCJuYW1lcyI6WyJmZXRjaC5jc3YiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OzBCQTJEVyxHQUFLLElBQUMsS0FBSzs7OzswQkFDWixHQUFLLElBQUMsTUFBTTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzhDQUpOLEdBQUssSUFBQyxHQUFHO2tEQUFPLEdBQUssSUFBQyxLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3FFQUEzQixHQUFLLElBQUMsR0FBRzs7OzsyRUFBTyxHQUFLLElBQUMsS0FBSzs7OztpRUFHaEMsR0FBSyxJQUFDLEtBQUs7aUVBQ1osR0FBSyxJQUFDLE1BQU07Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQTNEVCxLQUFLO0VBQ2QsR0FBRyxFQUFFLHVCQUF1QjtFQUM1QixLQUFLLEVBQUUsZUFBZTtFQUN0QixNQUFNLEVBQUUsa0JBQWtCO0VBQzFCLEdBQUcsRUFBRSxHQUFHO0VBQ1IsSUFBSSxFQUFFLE1BQU07Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzJCQzRDUCxHQUFJOzs7Z0NBQVQsTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzBCQUFDLEdBQUk7OzsrQkFBVCxNQUFJOzs7Ozs7Ozs7Ozs7Ozs7O3dCQUFKLE1BQUk7Ozs7Ozs7Ozs7a0NBQUosTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQTdDSCxDQUFDO0tBQ0QsSUFBSTtLQUNKLE1BQU0sR0FBRyxLQUFLOztDQUVsQixPQUFPO0VBQ05BLEdBQVMsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFFLENBQUM7R0FDN0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDOzttQkFJYixJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUMsQ0FBQztXQUNWLFFBQVEsQ0FBQyxDQUFDLENBQUMsYUFBYSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsYUFBYTtNQUMxRCxHQUFHLENBQUMsQ0FBQzs7S0FFTixHQUFHLFdBQVcsQ0FBQyxDQUFDLE9BQU87S0FDdkIsS0FBSyxFQUFFLENBQUMsQ0FBQyxPQUFPO0tBQ2hCLE1BQU0sRUFBRSxDQUFDLENBQUMsUUFBUTtLQUNsQixVQUFVLEVBQUUsU0FBUzs7OztHQUl2QixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUk7OztFQUdqQixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7a0JBRWIsTUFBTSxHQUFHLElBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
